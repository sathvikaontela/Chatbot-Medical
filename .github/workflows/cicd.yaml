name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  Continuous-Deployment:
    needs: Continuous-Integration   # âœ… properly nested
    runs-on: self-hosted

    steps:
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run Docker Image to serve users
        run: |
          docker stop medicalbot || true
          docker rm medicalbot || true

          docker pull 766377908014.dkr.ecr.us-east-2.amazonaws.com/medicalbot:latest
          docker run -d --name medicalbot -p 8080:8080 \
            --env AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --env AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --env AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} \
            --env PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }} \
            --env GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} \
            766377908014.dkr.ecr.us-east-2.amazonaws.com/medicalbot:latest
